package io.vdartsabvile.avspeak

import atlantafx.base.theme.CupertinoDark
import javafx.embed.swing.SwingFXUtils
import javafx.geometry.Insets
import javafx.geometry.Pos
import javafx.scene.Scene
import javafx.scene.SnapshotParameters
import javafx.scene.control.*
import javafx.scene.image.ImageView
import javafx.scene.image.WritableImage
import javafx.scene.layout.StackPane
import javafx.scene.layout.VBox
import javafx.scene.paint.Color
import javafx.scene.shape.Circle
import javafx.scene.text.Font
import javafx.scene.text.Text
import javafx.stage.Modality
import javafx.stage.Stage
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.RequestBody.Companion.asRequestBody
import org.json.JSONObject
import java.io.File
import javax.imageio.ImageIO

class AvatarCustomizationWindow {
    private val token = "y0_AgAAAABp--5nAAy69AAAAAEXVwYhAAAbFRr3hBtCjok0h8HRTVOvZIXCVw" // –í–∞—à —Ç–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
    var text = Text()
    var whiteOrBlack = CheckBox()



    fun openAvatarCustomizationForm(owner: Stage) {
            val AvatarStage = Stage()
            AvatarStage.initOwner(owner)
            AvatarStage.initModality(Modality.APPLICATION_MODAL)
            AvatarStage.title = "Avatar Customization"


            // –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
            val colorPicker = ColorPicker(Color.GRAY)

            val avatarComboBox = ComboBox<String>()
            avatarComboBox.items.addAll(
                "üòì", "üò¢", "üò≠", "üò§", "üò°", "üò†", "ü§¨", "üòà", "üëø", "üíÄ",
                "üòÄ", "üòé", "üòä", "üöÄ", "üê±", "üê∂", "üêµ", "ü¶Ñ", "üåü", "‚ù§",
                "üíÄ", "üëª", "üëë", "üí©", "üî•", "üåà", "üéâ", "üåπ", "üå∏", "üçÄ",
                "üí´", "üé∂", "ü¶ã", "üêù", "üêº", "ü¶Å", "üêØ", "üê∑", "üê∏", "ü¶Ñ",
                "üéØ", "üçï", "üçî", "üçü", "üç©", "üç¶", "üçé", "üçâ", "üçì", "üçí",
                "üíñ", "üíô", "üíö", "üíõ", "üíú", "ü§ñ", "üëΩ", "ü§†", "üíã", "üåº",
                "üåª", "üçÑ", "ü¶Ñ", "ü•ë", "ü•í", "üåΩ", "üçì", "üçç", "üçí", "üçá",
                "üçä", "üçã", "üçà", "üçå", "üçê", "ü•ù", "üçç", "üêâ", "ü¶ã", "ü¶Ä",
                "ü¶ú", "üêß", "üê¶", "ü¶à", "ü¶ë", "üé©", "üëí", "üëë", "üëü", "üëó",
                "üëö", "üëñ", "üõí", "üõÄ", "üéí", "‚õ∫", "üèï", "üõè", "üèñ", "üè†", "üè°"
            )
            avatarComboBox.promptText = "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤–∞—Ç–∞—Ä"

            // ImageView –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            val previewImageView = ImageView()
            previewImageView.fitWidth = 100.0
            previewImageView.fitHeight = 100.0
            previewImageView.clip = Circle(50.0, 50.0, 50.0)

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–≤–µ—Ç–∞ –∏–ª–∏ –±—É–∫–≤—ã
            val updatePreview = {
                val selectedColor = colorPicker.value ?: Color.BLACK
                val selectedLetter = avatarComboBox.value ?: "üí©"
                previewImageView.image = createAvatarImage(selectedColor, selectedLetter)
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            colorPicker.setOnAction { updatePreview() }
            avatarComboBox.setOnAction { updatePreview() }




        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
            val saveButton = Button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
            saveButton.style = "-fx-font-size: 18px;"
            saveButton.setOnAction {
                val username = AppState.username // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

                AppState.avatarImageView?.image = previewImageView.image
                AppState.smallAvatarImageView?.image = previewImageView.image
                AppState.updateAvatar(previewImageView.image)  // –û–±–Ω–æ–≤–ª—è–µ–º –≤ AppState
                val avatarWritableImage = previewImageView.image as? WritableImage ?: createAvatarImage(colorPicker.value, avatarComboBox.value ?: "üí©")

                if (username != null) {
                    uploadAvatarToYandexDisk(token, avatarWritableImage, username)
                }
                AvatarStage.close()
            }
            // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥ –¥–ª—è —Ñ–æ–Ω–∞ (–Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –∞–≤–∞—Ç–∞—Ä–∞)
            val backgroundCircle = Circle(60.0) // –†–∞–¥–∏—É—Å —á—É—Ç—å –±–æ–ª—å—à–µ —Ä–∞–¥–∏—É—Å–∞ –∞–≤–∞—Ç–∞—Ä–∞
            backgroundCircle.fill = Color.GRAY // –ó–∞–¥–∞–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞

            val avatarWrapper = StackPane(backgroundCircle, previewImageView)
            avatarWrapper.alignment = Pos.CENTER

        // –í–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞ openAvatarCustomizationForm
        whiteOrBlack = CheckBox("–ß–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç—É—Ä")

        // –ò–∑–º–µ–Ω–∏—Ç–µ —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞
        whiteOrBlack.setOnAction {
            text.fill = if (whiteOrBlack.isSelected) Color.BLACK else Color.WHITE
            updatePreview()
        }


        // Layout –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
            val layout = VBox(20.0, Label("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∞–≤–∞—Ç–∞—Ä–∞:"), avatarWrapper, Label("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:"), colorPicker, whiteOrBlack,avatarComboBox, saveButton)
            layout.alignment = Pos.CENTER
            layout.padding = Insets(20.0)

            val scene = Scene(layout, 550.0, 500.0)
            AvatarStage.scene = scene
            AvatarStage.show()

            scene.stylesheets.add(CupertinoDark().userAgentStylesheet)
        }
        private fun createAvatarImage(color: Color, letter: String): WritableImage {
            // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–ª—ã–π —Ñ–æ–Ω —Å —Ç–µ–∫—Å—Ç–æ–º –≤–Ω—É—Ç—Ä–∏
            val circle = Circle(50.0)
            circle.fill = color

            text = Text(letter)
            text.font = Font.font(70.0)
            text.fill = if (whiteOrBlack.isSelected) Color.BLACK else Color.WHITE

            // StackPane –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ñ–æ–Ω–∞ –∏ —Ç–µ–∫—Å—Ç–∞
            val avatarStack = StackPane(circle, text)
            avatarStack.alignment = Pos.CENTER

            // –°–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫ StackPane
            val snapshotParams = SnapshotParameters()
            snapshotParams.fill = Color.TRANSPARENT // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω

            return avatarStack.snapshot(snapshotParams, null)
        }
    fun uploadAvatarToYandexDisk(token: String, avatarImage: WritableImage, username: String) {
        val client = OkHttpClient()

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª .png
        val tempFile = File.createTempFile("avatar", ".png")
        ImageIO.write(SwingFXUtils.fromFXImage(avatarImage, null), "png", tempFile)

        // –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, "AVSpeak/avatar.png"
        val uploadPath = "AVSpeak/Avatars/avatar_$username.png"
        val request = Request.Builder()
            .url("https://cloud-api.yandex.net/v1/disk/resources/upload?path=$uploadPath&overwrite=true")
            .addHeader("Authorization", "OAuth $token")
            .build()

        client.newCall(request).execute().use { response ->
            if (response.isSuccessful) {
                // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                val uploadUrl = JSONObject(response.body?.string()).getString("href")

                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL
                val fileRequest = Request.Builder()
                    .url(uploadUrl)
                    .put(tempFile.asRequestBody("image/png".toMediaTypeOrNull()))
                    .build()

                client.newCall(fileRequest).execute().use { fileResponse ->
                    if (fileResponse.isSuccessful) {
                        println("–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –ø–æ–¥ –∏–º–µ–Ω–µ–º $uploadPath")
                    } else {
                        println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞: ${fileResponse.message}")
                    }
                }
            } else {
                println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: ${response.message}")
            }
        }

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        tempFile.delete()
    }
}

